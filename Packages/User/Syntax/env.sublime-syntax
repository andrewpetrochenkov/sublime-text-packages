%YAML 1.2
# based on https://github.com/sublimehq/Packages/blob/master/ShellScript/Bash.sublime-syntax
--- #---------------------------------------------------------------------------
name: env

scope: text.env

file_extensions:
  - .env
  - .envrc
  - env


#-------------------------------------------------------------------------------
variables:
  identifier: '[[:alpha:]_][[:alnum:]_]*'
  identifier_non_posix: '[^{{metachar}}\d][^{{metachar}}=]*'
  is_variable: (?=\s*{{nbc}}(?:[({]{{nbc}}[)}])?{{nbc}}=)
  keyword_boundary_end: (?!=)(?=[^\w_-]|$)

  # A character that, when unquoted, separates words. A metacharacter is a
  # space, tab, newline, or one of the following characters: ‘|’, ‘&’, ‘;’,
  # ‘(’, ‘)’, ‘<’, or ‘>’.
  metachar: '[\s\t\n|&;()<>]'

  nbc: '[^{}()=\s]*' # non bracket characters (and also non-whitespace, parens)
  reset_and: \s*(&&)
  reset_job: \s*(&)
  reset_or: \s*(\|\|)
  reset_pipe: \s*(\|)
  reset_semicolon: \s*(;)(?![;&])
  start_of_option: (?:\s+|^)--?(?=[\w$])
  varassign: '[+\-?]?='
#-------------------------------------------------------------------------------
contexts:

  comment:
    - match: (?:^\s*|\s+)(\#)
      captures:
        1:
          comment.line.number-sign.shell
          punctuation.definition.comment.begin.shell
      push:
        - meta_content_scope: comment.line.number-sign.shell
        # NOTE: The reason for consuming the newline character is as follows.
        # When triggering a snippet, its scope is tested to the *right* of the
        # cursor. So, if you don't want your snippet to trigger in a comment,
        # you have to use something like <scope>source.shell - comment</scope>.
        # If the newline character is not scoped as a comment too, then that
        # scope will never work, because the scope to the right of the cursor
        # will never be a comment scope. That is, unless we consume the newline
        # character (or we are editing something in the middle of an existing
        # comment).
        - match: \n
          scope: comment.line.number-sign.shell
          pop: true

  line-continuation-or-pop-at-end:
    - include: pop-at-end
    - include: line-continuation

  pop-at-end:
    - match: $
      pop: true

  any-escape:
    - match: \\.
      scope: constant.character.escape.shell

  line-continuation:
    - match: \\\n
      scope: punctuation.separator.continuation.line.shell
      push:
        - match: ^
          pop: true
    - match: \\(\s+)\n
      captures:
        1: invalid.illegal.extraneous-spaces-after-line-continuation.shell

  prototype:
    - include: comment
    - include: line-continuation
    - include: any-escape

  main:
    - include: vardef
      push: cmd

  expansion-and-string:
    - include: string
    - include: expansion

  vardef:
    - match: \s*\b(alias){{keyword_boundary_end}}
      captures:
        1: support.function.alias.shell
      push:
      - vardef-ensure-function-call-scope
      - vardef-maybe-more
      - vardef-value
      - vardef-assign
      - vardef-alias-name
      - vardef-alias-options
    - match: \s*\b(typeset|declare|local){{keyword_boundary_end}}
      captures:
        1: storage.modifier.shell
      push:
      - vardef-ensure-function-call-scope
      - vardef-maybe-more
      - vardef-value
      - vardef-assign
      - vardef-name
      - vardef-declare-options
    - match: \s*\b(export){{keyword_boundary_end}}
      captures:
        1: storage.modifier.shell
      push:
      - vardef-ensure-function-call-scope
      - vardef-maybe-more
      - vardef-value
      - vardef-assign
      - vardef-name
      - vardef-export-options
    - match: \s*\b(readonly){{keyword_boundary_end}}
      captures:
        1: storage.modifier.shell
      push:
      - vardef-ensure-function-call-scope
      - vardef-maybe-more
      - vardef-value
      - vardef-assign
      - vardef-name
      - vardef-readonly-options
    - match: '{{is_variable}}'
      push:
      - vardef-value
      - vardef-assign
      - vardef-name

  vardef-readonly-options:
    - match: \s*((-)(?:[aAf]+|p))
      captures:
        2: punctuation.definition.parameter.shell
        1: variable.parameter.option.shell
    - match: \s*
      pop: true

  vardef-export-options:
    - match: \s*((-)(?:[fn]+|p))
      captures:
        2: punctuation.definition.parameter.shell
        1: variable.parameter.option.shell
    - match: \s*
      pop: true

  vardef-ensure-function-call-scope:
    - meta_include_prototype: false
    - meta_scope: meta.function-call.shell
    - match: ""
      pop: true

  vardef-maybe-more:
    - meta_include_prototype: false
    - match: (?=`)
      pop: true
    - match: (?=\s*#)
      pop: true
    - include: cmd-args-boilerplate
    - match: (?=\S)
      push:
      - vardef-value
      - vardef-assign
      - vardef-name

  vardef-alias-options:
    - match: \s*((-)p)
      captures:
        2: punctuation.definition.parameter.shell
        1: variable.parameter.option.shell
    - match: \s*
      pop: true

  vardef-alias-name:
    - match: \s*
      set:
        - meta_include_prototype: false
        - meta_content_scope: entity.name.function.alias.shell
        - include: line-continuation-or-pop-at-end
        - include: any-escape
        - match: (?={{varassign}}|\s)|$
          pop: true
        - include: array
        - match: \s*$
          pop: true
        - include: string

  vardef-declare-options:
    - match: \s*((-)(?:[aAfFgilnrtux]+|p))
      captures:
        2: punctuation.definition.parameter.shell
        1: variable.parameter.option.shell
    - match: \s*
      pop: true

  vardef-name:
    - match: \s*
      set:
        - meta_include_prototype: false
        - meta_content_scope: variable.other.readwrite.assignment.shell
        - include: line-continuation-or-pop-at-end
        - include: any-escape
        - match: (?={{varassign}}|\s)|$|(?=[;&`]|{{metachar}})
          pop: true
        - include: array
        - match: \s*$
          pop: true
        - include: string

  vardef-assign:
    - meta_include_prototype: false
    - include: line-continuation-or-pop-at-end
    - include: any-escape
    - match: '{{varassign}}'
      scope: keyword.operator.assignment.shell
      pop: true
    - match: ""
      pop: true

  vardef-value:
    - meta_include_prototype: false
    - match: \(
      scope: punctuation.section.parens.begin.shell
      set:
        - match: \)
          scope: punctuation.section.parens.end.shell
          pop: true
        - match: \[
          scope: punctuation.section.brackets.begin.shell
          push:
            - match: \]
              scope: punctuation.section.brackets.end.shell
              set:
                - match: =
                  scope: keyword.operator.assignment.shell
                  pop: true
                - match: ""
                  pop: true
            - include: expansion-and-string
        - include: expansion-and-string
    - match: (?=[&`])
      pop: true
    - match: ""
      set:
        - meta_include_prototype: false
        - meta_scope: string.unquoted.shell
        - match: (?=`)
          pop: true
        - include: expansion-and-string
        - include: line-continuation-or-pop-at-end
        - include: any-escape
        - match: (?={{metachar}})
          pop: true

  main-with-pop-at-end:
    - include: line-continuation-or-pop-at-end
    - include: main

  expansion-tilde:
    - match: '~'
      scope: meta.group.expansion.tilde variable.language.tilde.shell

  expansion-brace:
    - match: \{
      scope: punctuation.section.expansion.brace.begin.shell
      push:
        - meta_scope: meta.group.expansion.brace.shell
        - match: \}
          scope: punctuation.section.expansion.brace.end.shell
          pop: true
        - match: \,
          scope: punctuation.separator.shell
        - include: expansion-and-string

  string:
    - include: string-quoted-double
    - include: string-quoted-single
    - include: string-ansi-c
    - include: string-locale

  # nothing is escaped in a singly-quoted string!
  string-quoted-single:
    - match: \'
      scope: punctuation.definition.string.begin.shell
      push:
        - meta_include_prototype: false
        - meta_scope: string.quoted.single.shell
        - match: \'
          scope: punctuation.definition.string.end.shell
          pop: true

  string-quoted-double:
    - match: \"
      scope: punctuation.definition.string.begin.shell
      push:
        - meta_include_prototype: false
        - meta_scope: string.quoted.double.shell
        - include: string-quoted-double-common

  string-quoted-double-escape-character:
    - match: \\[$`"\\]
      scope: constant.character.escape.shell
    - match: \\\n
      scope: constant.character.escape.shell
      push:
        - meta_include_prototype: false
        - match: (?=\S)
          pop: true

  # [Bash] 3.1.2.4
  string-ansi-c:
    - match: \$'
      scope: punctuation.definition.string.begin.shell
      push:
        - meta_include_prototype: false
        - meta_scope: string.quoted.single.ansi-c.shell
        - match: "'"
          scope: punctuation.definition.string.end.shell
          pop: true
        - include: string-quoted-double-escape-character
        - match: \\([abfnrtv'"?]|[0-8]{1,3}|x\h{1,8}|c[a-z])
          scope: constant.character.escape.shell

  # [Bash] 3.1.2.5
  # If the string is translated and replaced, the replacement is double-quoted.
  string-locale:
    - match: \$"
      scope: punctuation.definition.string.begin.shell
      push:
        - meta_include_prototype: false
        - meta_scope: string.quoted.double.locale.shell
        - include: string-quoted-double-common

  string-quoted-double-common:
    - match: \"
      scope: punctuation.definition.string.end.shell
      pop: true
    - include: string-quoted-double-escape-character
    - include: expansion-parameter
    - include: expansion-arithmetic
    - include: expansion-command
